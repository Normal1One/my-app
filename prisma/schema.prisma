datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.String
    refresh_token_expires_in Int?
    oauth_token              String? @db.String
    oauth_token_secret       String?
    access_token             String? @db.String
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.String
    session_state            String?

    @@unique([provider, providerAccountId])
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    resetToken     String?
    image          String?
    hashedPassword String?
    accounts       Account[]
    writtenPosts   Post[]    @relation("WrittenPosts")
    likedPostIDs   String[]  @db.ObjectId
    likedPosts     Post[]    @relation("LikedPosts", fields: [likedPostIDs], references: [id])
}

model Post {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    author     User     @relation("WrittenPosts", fields: [authorId], references: [id], onDelete: Cascade)
    authorId   String   @db.ObjectId
    title      String
    subtitle   String
    createdAt  DateTime @default(now())
    text       String
    likedByIDs String[] @db.ObjectId
    likedBy    User[]   @relation("LikedPosts", fields: [likedByIDs], references: [id])
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
